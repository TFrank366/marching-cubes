// marching.js
// implements the marching cubes algorithm

// vertex and edge convention used:
//                 7-------6       x--10---x
//                /|      /|  7  11|      9|  6
// z(k)          4-+-----5 |     x-+-8---x |
// ^ y(j)        | 3-----+-2     | x---2-+-x 
// |/            |/      |/   4  |3      |1   5
// o-->x(i)      0-------1       x---0---x

// vertex and edge convention used:
//                 7-------6          x---6---x
//                /|      /|     11  7|      5|  10
// z(k)          4-+-----5 |        x-+-4---x |
// ^ y(j)        | 3-----+-2        | x---2-+-x 
// |/            |/      |/      8  |3      |1   9
// o-->x(i)      0-------1          x---0---x

// coordinates of vertexes in relation to 0
const vertCoordTable = [
    [0, 0, 0], // 0
    [1, 0, 0], // 1
    [1, 1, 0], // 2
    [0, 1, 0], // 3
    [0, 0, 1], // 4
    [1, 0, 1], // 5
    [1, 1, 1], // 6
    [0, 1, 1], // 7
]

// table of active edges for a specific vertex code
const edgeTable = [
    [],
    [0,3,4],
    [0,1,5],
    [1,3,4,5],
    [1,2,6],
    [0,1,2,3,4,6],
    [0,2,5,6],
    [2,3,4,5,6],
    [2,3,7],
    [0,2,4,7],
    [0,1,2,3,5,7],
    [1,2,4,5,7],
    [1,3,6,7],
    [0,1,4,6,7],
    [0,3,5,6,7],
    [4,5,6,7],
    [4,8,11],
    [0,3,8,11],
    [0,1,4,5,8,11],
    [1,3,5,8,11],
    [1,2,4,6,8,11],
    [0,1,2,3,6,8,11],
    [0,2,4,5,6,8,11],
    [2,3,5,6,8,11],
    [2,3,4,7,8,11],
    [0,2,7,8,11],
    [0,1,2,3,4,5,7,8,11],
    [1,2,5,7,8,11],
    [1,3,4,6,7,8,11],
    [0,1,6,7,8,11],
    [0,3,4,5,6,7,8,11],
    [5,6,7,8,11],
    [5,8,9],
    [0,3,4,5,8,9],
    [0,1,8,9],
    [1,3,4,8,9],
    [1,2,5,6,8,9],
    [0,1,2,3,4,5,6,8,9],
    [0,2,6,8,9],
    [2,3,4,6,8,9],
    [2,3,5,7,8,9],
    [0,2,4,5,7,8,9],
    [0,1,2,3,7,8,9],
    [1,2,4,7,8,9],
    [1,3,5,6,7,8,9],
    [0,1,4,5,6,7,8,9],
    [0,3,6,7,8,9],
    [4,6,7,8,9],
    [4,5,9,11],
    [0,3,5,9,11],
    [0,1,4,9,11],
    [1,3,9,11],
    [1,2,4,5,6,9,11],
    [0,1,2,3,5,6,9,11],
    [0,2,4,6,9,11],
    [2,3,6,9,11],
    [2,3,4,5,7,9,11],
    [0,2,5,7,9,11],
    [0,1,2,3,4,7,9,11],
    [1,2,7,9,11],
    [1,3,4,5,6,7,9,11],
    [0,1,5,6,7,9,11],
    [0,3,4,6,7,9,11],
    [6,7,9,11],
    [6,9,10],
    [0,3,4,6,9,10],
    [0,1,5,6,9,10],
    [1,3,4,5,6,9,10],
    [1,2,9,10],
    [0,1,2,3,4,9,10],
    [0,2,5,9,10],
    [2,3,4,5,9,10],
    [2,3,6,7,9,10],
    [0,2,4,6,7,9,10],
    [0,1,2,3,5,6,7,9,10],
    [1,2,4,5,6,7,9,10],
    [1,3,7,9,10],
    [0,1,4,7,9,10],
    [0,3,5,7,9,10],
    [4,5,7,9,10],
    [4,6,8,9,10,11],
    [0,3,6,8,9,10,11],
    [0,1,4,5,6,8,9,10,11],
    [1,3,5,6,8,9,10,11],
    [1,2,4,8,9,10,11],
    [0,1,2,3,8,9,10,11],
    [0,2,4,5,8,9,10,11],
    [2,3,5,8,9,10,11],
    [2,3,4,6,7,8,9,10,11],
    [0,2,6,7,8,9,10,11],
    [0,1,2,3,4,5,6,7,8,9,10,11],
    [1,2,5,6,7,8,9,10,11],
    [1,3,4,7,8,9,10,11],
    [0,1,7,8,9,10,11],
    [0,3,4,5,7,8,9,10,11],
    [5,7,8,9,10,11],
    [5,6,8,10],
    [0,3,4,5,6,8,10],
    [0,1,6,8,10],
    [1,3,4,6,8,10],
    [1,2,5,8,10],
    [0,1,2,3,4,5,8,10],
    [0,2,8,10],
    [2,3,4,8,10],
    [2,3,5,6,7,8,10],
    [0,2,4,5,6,7,8,10],
    [0,1,2,3,6,7,8,10],
    [1,2,4,6,7,8,10],
    [1,3,5,7,8,10],
    [0,1,4,5,7,8,10],
    [0,3,7,8,10],
    [4,7,8,10],
    [4,5,6,10,11],
    [0,3,5,6,10,11],
    [0,1,4,6,10,11],
    [1,3,6,10,11],
    [1,2,4,5,10,11],
    [0,1,2,3,5,10,11],
    [0,2,4,10,11],
    [2,3,10,11],
    [2,3,4,5,6,7,10,11],
    [0,2,5,6,7,10,11],
    [0,1,2,3,4,6,7,10,11],
    [1,2,6,7,10,11],
    [1,3,4,5,7,10,11],
    [0,1,5,7,10,11],
    [0,3,4,7,10,11],
    [7,10,11],
    [7,10,11],
    [0,3,4,7,10,11],
    [0,1,5,7,10,11],
    [1,3,4,5,7,10,11],
    [1,2,6,7,10,11],
    [0,1,2,3,4,6,7,10,11],
    [0,2,5,6,7,10,11],
    [2,3,4,5,6,7,10,11],
    [2,3,10,11],
    [0,2,4,10,11],
    [0,1,2,3,5,10,11],
    [1,2,4,5,10,11],
    [1,3,6,10,11],
    [0,1,4,6,10,11],
    [0,3,5,6,10,11],
    [4,5,6,10,11],
    [4,7,8,10],
    [0,3,7,8,10],
    [0,1,4,5,7,8,10],
    [1,3,5,7,8,10],
    [1,2,4,6,7,8,10],
    [0,1,2,3,6,7,8,10],
    [0,2,4,5,6,7,8,10],
    [2,3,5,6,7,8,10],
    [2,3,4,8,10],
    [0,2,8,10],
    [0,1,2,3,4,5,8,10],
    [1,2,5,8,10],
    [1,3,4,6,8,10],
    [0,1,6,8,10],
    [0,3,4,5,6,8,10],
    [5,6,8,10],
    [5,7,8,9,10,11],
    [0,3,4,5,7,8,9,10,11],
    [0,1,7,8,9,10,11],
    [1,3,4,7,8,9,10,11],
    [1,2,5,6,7,8,9,10,11],
    [0,1,2,3,4,5,6,7,8,9,10,11],
    [0,2,6,7,8,9,10,11],
    [2,3,4,6,7,8,9,10,11],
    [2,3,5,8,9,10,11],
    [0,2,4,5,8,9,10,11],
    [0,1,2,3,8,9,10,11],
    [1,2,4,8,9,10,11],
    [1,3,5,6,8,9,10,11],
    [0,1,4,5,6,8,9,10,11],
    [0,3,6,8,9,10,11],
    [4,6,8,9,10,11],
    [4,5,7,9,10],
    [0,3,5,7,9,10],
    [0,1,4,7,9,10],
    [1,3,7,9,10],
    [1,2,4,5,6,7,9,10],
    [0,1,2,3,5,6,7,9,10],
    [0,2,4,6,7,9,10],
    [2,3,6,7,9,10],
    [2,3,4,5,9,10],
    [0,2,5,9,10],
    [0,1,2,3,4,9,10],
    [1,2,9,10],
    [1,3,4,5,6,9,10],
    [0,1,5,6,9,10],
    [0,3,4,6,9,10],
    [6,9,10],
    [6,7,9,11],
    [0,3,4,6,7,9,11],
    [0,1,5,6,7,9,11],
    [1,3,4,5,6,7,9,11],
    [1,2,7,9,11],
    [0,1,2,3,4,7,9,11],
    [0,2,5,7,9,11],
    [2,3,4,5,7,9,11],
    [2,3,6,9,11],
    [0,2,4,6,9,11],
    [0,1,2,3,5,6,9,11],
    [1,2,4,5,6,9,11],
    [1,3,9,11],
    [0,1,4,9,11],
    [0,3,5,9,11],
    [4,5,9,11],
    [4,6,7,8,9],
    [0,3,6,7,8,9],
    [0,1,4,5,6,7,8,9],
    [1,3,5,6,7,8,9],
    [1,2,4,7,8,9],
    [0,1,2,3,7,8,9],
    [0,2,4,5,7,8,9],
    [2,3,5,7,8,9],
    [2,3,4,6,8,9],
    [0,2,6,8,9],
    [0,1,2,3,4,5,6,8,9],
    [1,2,5,6,8,9],
    [1,3,4,8,9],
    [0,1,8,9],
    [0,3,4,5,8,9],
    [5,8,9],
    [5,6,7,8,11],
    [0,3,4,5,6,7,8,11],
    [0,1,6,7,8,11],
    [1,3,4,6,7,8,11],
    [1,2,5,7,8,11],
    [0,1,2,3,4,5,7,8,11],
    [0,2,7,8,11],
    [2,3,4,7,8,11],
    [2,3,5,6,8,11],
    [0,2,4,5,6,8,11],
    [0,1,2,3,6,8,11],
    [1,2,4,6,8,11],
    [1,3,5,8,11],
    [0,1,4,5,8,11],
    [0,3,8,11],
    [4,8,11],
    [4,5,6,7],
    [0,3,5,6,7],
    [0,1,4,6,7],
    [1,3,6,7],
    [1,2,4,5,7],
    [0,1,2,3,5,7],
    [0,2,4,7],
    [2,3,7],
    [2,3,4,5,6],
    [0,2,5,6],
    [0,1,2,3,4,6],
    [1,2,6],
    [1,3,4,5],
    [0,1,5],
    [0,3,4],
    []
]

// converts from an edge number to the numbers of the vertices it connects
const edgeToVertsTable = [
    [0, 1], // 0
    [1, 2], // 1
    [2, 3], // 2
    [0, 3], // 3
    [0, 4], // 4
    [1, 5], // 5
    [2, 6], // 6
    [3, 7], // 7
    [4, 5], // 8
    [5, 6], // 9
    [6, 7], // 10
    [4, 7], // 11
]


// takes 3d data (val >= 0) as a 3d array and returns list of vertices and indices for the mesh
// at the supplied threshold value
var generateMesh = (data, threshold) => {
    let verts = []
    for (let i = 0; i < data.length-1; i++) {
        for (let j = 0; j < data[i].length-1; j++) {
            for (let k = 0; k < data[i][j].length-1; k++) {

                // generate code for the cell
                var code = 0;
                for (let l = 0; l < 8; l++) {
                    const c = vertCoordTable[l];
                    code |= (data[i + c[0]][j + c[1]][k + c[2]] > threshold) << l;
                }

                // gets appropriate acitve edges
                let edges = edgeTable[code]

                //turns edge list into coords
                theseVerts = edgesToCoords(edges, [i, j, k], [1, 1, 1])
                verts.push(...theseVerts);
            }
        }
    }
    return verts;
}

// interpolates between 2 coords
// WILL DO: add linear interpolation based on value
var interpolateCoord = (a, b) => {
    let final = []
    for (i = 0; i < a.length; i++) {
        final[i] = (a[i] + b[i])/2
    }
    return final;
}

// cellCoord is coord of 0 vertex in cell
var edgesToCoords = (edges, cellCoord, cellDims) => {
    let coords = [];
    // loop through each edge
    for (let i = 0; i < edges.length; i++) {  
        // get verts associated with it
        let verts = edgeToVertsTable[edges[i]]
        // get coords of that vert
        let a = VecMath.vecMult(vertCoordTable[verts[0]], cellDims)
        let b = VecMath.vecMult(vertCoordTable[verts[1]], cellDims)
        // pass into interpolate coords
        // add to coords list
        coords.push(VecMath.vecAdd(interpolateCoord(a, b), cellCoord));
    }
    return coords;
}


// for generating tables and checking values:

// returns list of active edges for the specific vertex code
var edgesFromCode = (code) => {
    const v0 = (code & 1<<0) && true;
    const v1 = (code & 1<<1) && true;
    const v2 = (code & 1<<2) && true;
    const v3 = (code & 1<<3) && true;
    const v4 = (code & 1<<4) && true;
    const v5 = (code & 1<<5) && true;
    const v6 = (code & 1<<6) && true;
    const v7 = (code & 1<<7) && true;

    let edges = [];
    if (v0 ^ v1) edges.push(0)
    if (v1 ^ v2) edges.push(1)
    if (v2 ^ v3) edges.push(2)
    if (v0 ^ v3) edges.push(3)
    if (v0 ^ v4) edges.push(4)
    if (v1 ^ v5) edges.push(5)
    if (v2 ^ v6) edges.push(6)
    if (v3 ^ v7) edges.push(7)
    if (v4 ^ v5) edges.push(8)
    if (v5 ^ v6) edges.push(9)
    if (v6 ^ v7) edges.push(10)
    if (v4 ^ v7) edges.push(11)
    return edges
}

var generateEdgeTable = () => {
    let table = []
    for (i = 0; i < 256; i++) {
        table[i] = edgesFromCode(i);
    }
    return table;
}

{
    // var data = [[[],[]],[[],[]]]
    // data[0][0][0] = Math.random();
    // data[0][0][1] = Math.random();
    // data[0][1][0] = Math.random();
    // data[0][1][1] = Math.random();
    // data[1][0][0] = Math.random();
    // data[1][0][1] = Math.random();
    // data[1][1][0] = Math.random();
    // data[1][1][1] = Math.random();

    // generateMesh(data, 0.5)
}
